- hosts: 127.0.0.1
  connection: local
  gather_facts: no
  vars_files:
    - ./group_vars/dataiku

  tasks:
    - name: Increase system limits as required by DSS
      become: true
      pam_limits:
        domain: "{{dss_service_user}}"
        limit_item: "{{item}}"
        limit_type: "-"
        value: 65536
      loop:
        - nofile
        - nproc
   
    - name: Update apt-get repo and cache
      become: true
      apt: update_cache=yes force_apt_get=yes cache_valid_time=3600

    - name: Create service user
      become: true
      user:
        name: "{{dss_service_user}}"
        state: present

    - name: Create public directories
      become: true
      file:
        path: "{{dss_install_dir_location}}"
        state: directory
        owner: "{{dss_service_user}}"
        mode: "u=rwx,g=rx,o=rx"

    - name: Check if there is an larger attached volume on RSC to store data on.
      stat:
        path: /data/volume_2
      register: extra_volume_attached

    - name: Define DATA_DIR based on attached storage
      set_fact:
          dss_data_dirs_location: "/data/volume_2/dataiku"
      when: extra_volume_attached.stat.exists

    - name: Define DATA_DIR based on attached storage
      set_fact:
          dss_data_dirs_location: "/data/dataiku"
      when: not extra_volume_attached.stat.exists

    - name: Create private directories
      become: true
      file:
        path: "{{dss_data_dirs_location}}"
        state: directory
        owner: "{{dss_service_user}}"
        mode: "u=rwx,g=,o="

    - name: Download DSS
      become: true
      become_user: "{{dss_service_user}}"
      get_url:
        url: "https://cdn.downloads.dataiku.com/public/studio/{{dss_version}}/dataiku-dss-{{dss_version}}.tar.gz"
        dest: "{{dss_install_dir_location}}/dataiku-dss-{{dss_version}}.tar.gz"

    - name: Unarchive DSS
      become: true
      become_user: "{{dss_service_user}}"
      unarchive:
        src: "{{dss_install_dir_location}}/dataiku-dss-{{dss_version}}.tar.gz"
        dest: "{{dss_install_dir_location}}"
        creates: "{{dss_install_dir_location}}/dataiku-dss-{{dss_version}}"
        remote_src: yes

    - name: Install DSS dependencies
      become: true
      shell:
        cmd: |
          {{dss_install_dir_location}}/dataiku-dss-{{dss_version}}/scripts/install/install-deps.sh -yes 2>&1 > /tmp/dss-install-deps.log
          touch {{dss_install_dir_location}}/dataiku-dss-{{dss_version}}/scripts/install/DEPS-INSTALLED
        creates: "{{dss_install_dir_location}}/dataiku-dss-{{dss_version}}/scripts/install/DEPS-INSTALLED"
    
    - name: Check if dataiku is installed
      become: true
      stat:
        path: /home/dataiku/dataiku
      register: dataiku_installed

    - name: Run the Dataiku DSS installer
      become: true
      become_user: "{{dss_service_user}}"
      command: "{{dss_install_dir_location}}/dataiku-dss-{{dss_version}}/installer.sh -d /home/{{dss_service_user}}/dataiku -p {{port}}"
      args:
        creates: "/home/{{dss_service_user}}/{{datadir}}/dss-version.json"
      when: not dataiku_installed.stat.exists

    - name: Install boot service
      become: true
      command: "{{dss_install_dir_location}}/dataiku-dss-{{dss_version}}/scripts/install/install-boot.sh -n {{datadir}} /home/dataiku/{{dss_service_user}} dataiku"
      args:
        creates: "/etc/init.d/dataiku.{{datadir}}"

    - name: Start the studio
      become: true
      service:
        name: "dataiku.{{datadir}}"
        state: started
        enabled: true

    # - name: start dataiku
    #   become: true
    #   become_user: "{{dss_service_user}}"
    #   shell: /home/dataiku/dataiku/bin/dss start 

    - name: copy nginx config
      copy:
        src: ../files/dataiku/nginx.conf
        dest: /etc/nginx/app-location-conf.d/rstudio.conf
      notify: restart nginx

  handlers:
    - name: restart nginx
      service:
        name: nginx
        state: restarted